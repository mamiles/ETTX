
package com.cisco.ettx.admin.gui.web.helper;

import com.cisco.ettx.admin.common.*;
import org.apache.log4j.Logger;
import com.cisco.ettx.admin.gui.web.datatypes.*;
import java.util.*;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Method;
import com.cisco.ettx.admin.common.util.AttrNameConstants;


public class CollEngineHelper extends AttrNameConstants {
	public static final String UNABLE_TO_EXECUTE_SERVICE = "Unable to execute service";
	private static Logger logger = Logger.getLogger(CollEngineHelper.class);

	//Task names
	private static String TROUBLESHOOT_DATA_SERVICE = "TROUBLESHOOT_DATA_SERVICE";
	private static String QUERY_SUBSCRIBERS_SERVICE = "QUERY_SUBSCRIBERS_SERVICE";
	private static String GET_SERVICES_SERVICE = "GET_SUBSCRIBER_SERVICE_NAMES";
	private static String GET_SUBSCRIBER_DETAIL_SERVICE = "GET_SUBSCRIBER_DETAIL_SERVICE";
	private static String QUERY_LEASE_HISTORY_SERVICE = "QUERY_LEASE_HISTORY_SERVICE";


	private static int NUM_RECORDS = 1000;

	public static  AttrResult iterateRecords(String token,int numRecords) throws
		java.rmi.RemoteException {
		AdminServicesLocator loc = new AdminServicesLocator();
		try {
			DataCollection stub = loc.getDataCollection();
			return stub.iterateRecords(token,numRecords);
		}
		catch (javax.xml.rpc.ServiceException ex) {
			logger.error("Unable to get service executed",ex);
			throw new java.rmi.RemoteException(UNABLE_TO_EXECUTE_SERVICE);
		}
	}


	public static TroubleshootRecord getTroubleshootDetails(String subsID) 
		throws java.rmi.RemoteException {
		try {
			AdminServicesLocator loc = new AdminServicesLocator();
			DataCollection stub = loc.getDataCollection();
			HashMap input = new HashMap();
			input.put(SUBSCRIBER_ID,subsID);
			HashMap output = stub.executeTask(TROUBLESHOOT_DATA_SERVICE,
				input,0);
			if (output == null || output.size() == 0) {
				//We did not get enough data
				logger.error("Unable to execute service. Returned no data");
				throw new java.rmi.RemoteException(UNABLE_TO_EXECUTE_SERVICE);
			}
			TroubleshootRecord rec = (TroubleshootRecord)createObject(output,TroubleshootRecord.class);
			return rec;
		}
		catch (javax.xml.rpc.ServiceException ex) {
			logger.error("Unable to get service executed",ex);
			throw new java.rmi.RemoteException(UNABLE_TO_EXECUTE_SERVICE);
		}
	}

	public static SubscriberRecord getSubscriberDetails(String subsID) 
		throws java.rmi.RemoteException {
		try {
			AdminServicesLocator loc = new AdminServicesLocator();
			DataCollection stub = loc.getDataCollection();
			HashMap input = new HashMap();
			input.put(SUBSCRIBER_ID,subsID);
			HashMap output = stub.executeTask(GET_SUBSCRIBER_DETAIL_SERVICE,
				input,0);
			if (output == null || output.size() == 0) {
				//We did not get enough data
				logger.error("Unable to execute service. Returned no data");
				throw new java.rmi.RemoteException(UNABLE_TO_EXECUTE_SERVICE);
			}
			SubscriberRecord rec = (SubscriberRecord)createObject(output,SubscriberRecord.class);
			return rec;
				
		}
		catch (javax.xml.rpc.ServiceException ex) {
			logger.error("Unable to get service executed",ex);
			throw new java.rmi.RemoteException(UNABLE_TO_EXECUTE_SERVICE);
		}
	}


	public static Vector getServiceNames() 
		throws java.rmi.RemoteException {
		try {
			AdminServicesLocator loc = new AdminServicesLocator();
			DataCollection stub = loc.getDataCollection();
			HashMap input = new HashMap();
			HashMap output = stub.executeTask(GET_SERVICES_SERVICE,
				input,0);
			if (output == null || output.size() == 0) {
				//We did not get enough data
				logger.error("Unable to execute service. Returned no data");
				throw new java.rmi.RemoteException(UNABLE_TO_EXECUTE_SERVICE);
			}
			return (Vector)output.get(SERVICE_NAMES);
		}
		catch (javax.xml.rpc.ServiceException ex) {
			logger.error("Unable to get service executed",ex);
			throw new java.rmi.RemoteException(UNABLE_TO_EXECUTE_SERVICE);
		}
	}

	public static Vector getSubscriberRecords(String subsFilter,String addrFilter, String phoneFilter, String serviceFilter, String switchFilter)
		throws java.rmi.RemoteException {
		try {
			AdminServicesLocator loc = new AdminServicesLocator();
			DataCollection stub = loc.getDataCollection();
			HashMap input = new HashMap();
			if (subsFilter != null && subsFilter.length() > 0) {
				input.put(SUBS_FILTER_ATTR_NAME,subsFilter);
			}
			if (addrFilter != null && addrFilter.length() > 0) {
				input.put(ADDRESS_FILTER_ATTR_NAME,addrFilter);
			}
			if (phoneFilter != null && phoneFilter.length() > 0) {
				input.put(PHONE_FILTER_ATTR_NAME,phoneFilter);
			}
			if (serviceFilter != null && serviceFilter.length() > 0) {
				input.put(SERVICE_FILTER_ATTR_NAME,serviceFilter);
			}
			if (switchFilter != null && switchFilter.length() > 0) {
				input.put(SWITCH_FILTER_ATTR_NAME,switchFilter);
			}
			HashMap output = stub.executeTask(QUERY_SUBSCRIBERS_SERVICE,
				input,NUM_RECORDS);
			if (output == null || output.size() == 0) {
				//We did not get enough data
				logger.error("Unable to execute service. Returned no data");
				throw new java.rmi.RemoteException(UNABLE_TO_EXECUTE_SERVICE);
			}
			AttrResult  result = (AttrResult)output.get(SUBS_RECORDS_ATTR_NAME);
			if (result == null) {
				logger.error("Unable to execute service. Did not return subscriberRecords");
				throw new java.rmi.RemoteException(UNABLE_TO_EXECUTE_SERVICE);
			}
			Vector subs = new Vector();
			boolean pendingRecords =  true;
			while (pendingRecords) {
				Vector records = (Vector)result.getOutput();
				Enumeration iter = records.elements();
				while (iter.hasMoreElements()) {
					HashMap record = (HashMap)iter.nextElement();
					subs.add(createObject(record,SubscriberRecord.class));
				}
				if (result.getPending() > 0) {
					result = iterateRecords(result.getIterator(),NUM_RECORDS);
				}
				else {
					pendingRecords = false;
				}
			}
			return subs;
		}
		catch (javax.xml.rpc.ServiceException ex) {
			logger.error("Unable to get service executed",ex);
			throw new java.rmi.RemoteException(UNABLE_TO_EXECUTE_SERVICE);
		}
	}

	public static Vector getLeaseHistory(String subsName,String ipAddr, String startDate, String endDate) 
		throws java.rmi.RemoteException {
		try {
			AdminServicesLocator loc = new AdminServicesLocator();
			DataCollection stub = loc.getDataCollection();
			HashMap input = new HashMap();
			if (subsName != null && subsName.length() > 0) {
				input.put(SUBS_ATTR_NAME,subsName);
			}
			if (ipAddr != null && ipAddr.length() > 0) {
				input.put(IP_ADDR_ATTR_NAME,ipAddr);
			}
			input.put(START_DATE_ATTR_NAME,startDate);
			input.put(END_DATE_ATTR_NAME,endDate);
			HashMap output = stub.executeTask(QUERY_LEASE_HISTORY_SERVICE,
				input,NUM_RECORDS);
			if (output == null || output.size() == 0) {
				//We did not get enough data
				logger.error("Unable to execute service. Returned no data");
				throw new java.rmi.RemoteException(UNABLE_TO_EXECUTE_SERVICE);
			}
			AttrResult  result = (AttrResult)output.get(LEASE_INF_ATTR_NAME);
			if (result == null) {
				logger.error("Unable to execute service. Did not return subscriberRecords");
				throw new java.rmi.RemoteException(UNABLE_TO_EXECUTE_SERVICE);
			}
			Vector list = new Vector();
			boolean pendingRecords =  true;
			while (pendingRecords) {
				Vector records = (Vector)result.getOutput();
				Enumeration iter = records.elements();
				while (iter.hasMoreElements()) {
					HashMap record = (HashMap)iter.nextElement();
					list.add(createObject(record,LeaseHistoryRecord.class));
				}
				if (result.getPending() > 0) {
					result = iterateRecords(result.getIterator(),NUM_RECORDS);
				}
				else {
					pendingRecords = false;
				}
			}
			while (result.getPending() > 0);
			return list;
		}
		catch (javax.xml.rpc.ServiceException ex) {
			logger.error("Unable to get service executed",ex);
			throw new java.rmi.RemoteException(UNABLE_TO_EXECUTE_SERVICE);
		}
	}


	private static Object createObject(HashMap output,Class classObj) throws java.rmi.RemoteException {
		try {
			Object rec = classObj.newInstance();
			Iterator keys = output.keySet().iterator();
			while (keys.hasNext()) {
				String attrName = (String)keys.next();
				Object value = output.get(attrName);
				try {
					logger.debug("Adding value " + value + " to property " + attrName + " in Object " + classObj.toString());
					PropertyDescriptor prop = new PropertyDescriptor(
						attrName,classObj);
					Method setMethod = prop.getWriteMethod();
					setMethod.invoke(rec,new Object[] {value});
				}
				catch (Exception ex) {
					logger.error("Unable to set value " + value + " for attribute " + attrName,ex);
				}
			}
			return rec;
		}
		catch (Exception ex) {
			logger.error("Unable to create object of class " + classObj,ex);
			throw new java.rmi.RemoteException(UNABLE_TO_EXECUTE_SERVICE);
		}
	}
}
